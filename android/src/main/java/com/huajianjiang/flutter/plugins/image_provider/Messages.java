// Autogenerated from Pigeon (v0.1.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.huajianjiang.flutter.plugins.image_provider;

import java.util.HashMap;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TextureMessage {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static TextureMessage fromMap(HashMap map) {
      TextureMessage fromMapResult = new TextureMessage();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LoadMeaasge {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    private String uri;
    public String getUri() { return uri; }
    public void setUri(String setterArg) { this.uri = setterArg; }

    private Long width;
    public Long getWidth() { return width; }
    public void setWidth(Long setterArg) { this.width = setterArg; }

    private Long height;
    public Long getHeight() { return height; }
    public void setHeight(Long setterArg) { this.height = setterArg; }

    private Long resizeMode;
    public Long getResizeMode() { return resizeMode; }
    public void setResizeMode(Long setterArg) { this.resizeMode = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("uri", uri);
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      toMapResult.put("resizeMode", resizeMode);
      return toMapResult;
    }
    static LoadMeaasge fromMap(HashMap map) {
      LoadMeaasge fromMapResult = new LoadMeaasge();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      Object uri = map.get("uri");
      fromMapResult.uri = (String)uri;
      Object width = map.get("width");
      fromMapResult.width = (width == null) ? null : ((width instanceof Integer) ? (Integer)width : (Long)width);
      Object height = map.get("height");
      fromMapResult.height = (height == null) ? null : ((height instanceof Integer) ? (Integer)height : (Long)height);
      Object resizeMode = map.get("resizeMode");
      fromMapResult.resizeMode = (resizeMode == null) ? null : ((resizeMode instanceof Integer) ? (Integer)resizeMode : (Long)resizeMode);
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ImageProviderApi {
    TextureMessage create();
    void dispose(TextureMessage arg);
    void load(LoadMeaasge arg);

    /** Sets up an instance of `ImageProviderApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, ImageProviderApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ImageProviderApi.create", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              TextureMessage output = api.create();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ImageProviderApi.dispose", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TextureMessage input = TextureMessage.fromMap((HashMap)message);
              api.dispose(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ImageProviderApi.load", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              LoadMeaasge input = LoadMeaasge.fromMap((HashMap)message);
              api.load(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
